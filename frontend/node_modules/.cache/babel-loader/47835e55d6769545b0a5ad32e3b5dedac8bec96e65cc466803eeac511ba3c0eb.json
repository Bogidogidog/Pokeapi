{"ast":null,"code":"var _jsxFileName = \"/Users/bogidogi/Desktop/codecoollesson/RepositoryJob/Pokeapi/frontend/src/components/PokemonData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { NoPokemonFound } from \"./NoPokemonFound\";\nimport { PokemonFound } from \"./PokemonFound\";\nimport ConstGeneral from \"../constants/ConstGeneral\";\nimport { GetRandomItemFromArray } from \"./functions/GetRandomItemFromArray\";\n\n// starting pokemons\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet usersPokemon = [];\nconst PokemonData = ({\n  user,\n  locationUrl,\n  setEncounterEnded\n}) => {\n  _s();\n  const [pokemon, setPokemon] = useState(null);\n  const [ourPokemons, setOurPokemons] = useState(null);\n  const [opponentUrl, setOpponentUrl] = useState(null);\n  useEffect(() => {\n    const fetchPokemons = async () => {\n      try {\n        const response = await fetch(`${ConstGeneral.API_URL}/users/${user.id}/profile`);\n        if (!response.ok) {\n          throw new Error(\"failed to fetch\");\n        }\n        const data = await response.json();\n        usersPokemon = data.pokemons;\n        console.log(usersPokemon);\n        // set user's pokemons\n        const usersPokemons = await Promise.all(usersPokemon.map(async pokeApi => {\n          const pokeApiResponse = await fetch(pokeApi);\n          const pokeApiData = await pokeApiResponse.json();\n          return pokeApiData;\n        }));\n        setOurPokemons(usersPokemons);\n\n        // set the adversary pokemon\n        const locationResponse = await fetch(locationUrl);\n        const locationData = await locationResponse.json();\n        const areas = locationData.areas;\n        const randomAreas = GetRandomItemFromArray(areas);\n        const areaUrl = randomAreas.url;\n        const areaResponse = await fetch(areaUrl);\n        const areaData = await areaResponse.json();\n        const pokemonEncounters = areaData.pokemon_encounters;\n        if (pokemonEncounters.length > 0) {\n          const randomPokemonEncounter = GetRandomItemFromArray(pokemonEncounters);\n          const pokemonUrl = randomPokemonEncounter.pokemon.url;\n          setOpponentUrl(pokemonUrl);\n          const pokemonResponse = await fetch(pokemonUrl);\n          const pokemonData = await pokemonResponse.json();\n          setPokemon(pokemonData);\n        } else {\n          setPokemon(\"none\");\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    fetchPokemons();\n  }, [locationUrl, user.id]);\n  const handleEncounterEnd = () => {\n    setEncounterEnded(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: pokemon === null || pokemon === \"none\" ? /*#__PURE__*/_jsxDEV(NoPokemonFound, {\n      onTryAnotherLocation: handleEncounterEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(PokemonFound, {\n      pokemon: pokemon,\n      usersPokemon: usersPokemon,\n      opponentUrl: opponentUrl,\n      ourPokemons: ourPokemons,\n      onEncounterEnd: handleEncounterEnd,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(PokemonData, \"c1rE4oNtNHUKGaVGra54Jw47vT4=\");\n_c = PokemonData;\nexport default PokemonData;\nvar _c;\n$RefreshReg$(_c, \"PokemonData\");","map":{"version":3,"names":["React","useEffect","useState","NoPokemonFound","PokemonFound","ConstGeneral","GetRandomItemFromArray","jsxDEV","_jsxDEV","usersPokemon","PokemonData","user","locationUrl","setEncounterEnded","_s","pokemon","setPokemon","ourPokemons","setOurPokemons","opponentUrl","setOpponentUrl","fetchPokemons","response","fetch","API_URL","id","ok","Error","data","json","pokemons","console","log","usersPokemons","Promise","all","map","pokeApi","pokeApiResponse","pokeApiData","locationResponse","locationData","areas","randomAreas","areaUrl","url","areaResponse","areaData","pokemonEncounters","pokemon_encounters","length","randomPokemonEncounter","pokemonUrl","pokemonResponse","pokemonData","err","error","handleEncounterEnd","children","onTryAnotherLocation","fileName","_jsxFileName","lineNumber","columnNumber","onEncounterEnd","_c","$RefreshReg$"],"sources":["/Users/bogidogi/Desktop/codecoollesson/RepositoryJob/Pokeapi/frontend/src/components/PokemonData.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { NoPokemonFound } from \"./NoPokemonFound\";\nimport { PokemonFound } from \"./PokemonFound\";\nimport ConstGeneral from \"../constants/ConstGeneral\";\nimport { GetRandomItemFromArray } from \"./functions/GetRandomItemFromArray\";\n\n// starting pokemons\nlet usersPokemon = [];\n\nconst PokemonData = ({ user, locationUrl, setEncounterEnded }) => {\n  const [pokemon, setPokemon] = useState(null);\n  const [ourPokemons, setOurPokemons] = useState(null);\n  const [opponentUrl, setOpponentUrl] = useState(null);\n\n  useEffect(() => {\n    const fetchPokemons = async () => {\n      try {\n        const response = await fetch(`${ConstGeneral.API_URL}/users/${user.id}/profile`)\n        if(!response.ok){\n          throw new Error(\"failed to fetch\")\n        }\n        const data = await response.json();\n        usersPokemon = data.pokemons\n        console.log(usersPokemon)\n        // set user's pokemons\n        const usersPokemons = await Promise.all(\n          usersPokemon.map(async (pokeApi) => {\n            const pokeApiResponse = await fetch(pokeApi);\n            const pokeApiData = await pokeApiResponse.json();\n            return pokeApiData;\n          })\n        );\n        setOurPokemons(usersPokemons);\n\n        // set the adversary pokemon\n        const locationResponse = await fetch(locationUrl);\n        const locationData = await locationResponse.json();\n        const areas = locationData.areas;\n        const randomAreas = GetRandomItemFromArray(areas);\n        const areaUrl = randomAreas.url;\n        const areaResponse = await fetch(areaUrl);\n        const areaData = await areaResponse.json();\n        const pokemonEncounters = areaData.pokemon_encounters;\n        if (pokemonEncounters.length > 0) {\n          const randomPokemonEncounter =\n            GetRandomItemFromArray(pokemonEncounters);\n          const pokemonUrl = randomPokemonEncounter.pokemon.url;\n          setOpponentUrl(pokemonUrl);\n          const pokemonResponse = await fetch(pokemonUrl);\n          const pokemonData = await pokemonResponse.json();\n          setPokemon(pokemonData);\n        } else {\n          setPokemon(\"none\");\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    fetchPokemons();\n  }, [locationUrl, user.id]);\n\n  const handleEncounterEnd = () => {\n    setEncounterEnded(true);\n  };\n\n  return (\n    <div>\n      {pokemon === null || pokemon === \"none\" ? (\n        <NoPokemonFound onTryAnotherLocation={handleEncounterEnd} />\n      ) : (\n        <PokemonFound\n          pokemon={pokemon}\n          usersPokemon={usersPokemon}\n          opponentUrl={opponentUrl}\n          ourPokemons={ourPokemons}\n          onEncounterEnd={handleEncounterEnd}\n          user={user}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PokemonData"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}